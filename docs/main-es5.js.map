{"version":3,"sources":["webpack:///./$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/list-view/list-view.component.html","webpack:///./src/app/post-view/post-view.component.html","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/list-view/list-view.component.ts","webpack:///./src/app/post-view/post-view.component.ts","webpack:///./src/app/reddit-api.service.ts","webpack:///./src/app/shared-classes.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","module.exports = \"<router-outlet></router-outlet>\"","module.exports = \"<div class=\\\"container\\\">\\n    <!-- Not routing, but gets the job done :) -->\\n    <div *ngIf=\\\"selectedPost\\\">\\n        <div class=\\\"text-left my-3\\\" (click)=\\\"clearSelectedPost()\\\"><i class=\\\"fas fa-arrow-left\\\"></i> </div>\\n        <app-post-view [selectedPost]=\\\"selectedPost\\\"></app-post-view>\\n    </div>\\n\\n    <div [ngClass]=\\\"selectedPost ? 'd-none' : ''\\\">\\n        <div *ngIf=\\\"redditPosts else loading\\\">\\n            <ng-container *ngFor=\\\"let post of redditPosts\\\">\\n                <div class=\\\"card my-3  bg-dark text-white\\\" (click)=\\\"selectPost(post.id)\\\">\\n                    <div class=\\\"card-body\\\">\\n                        <div class=\\\"d-flex flex-row mb-3 \\\">\\n                            <span class=\\\"font-weight-bold mr-2\\\">r/{{post.subReddit}}</span>\\n                            <span class=\\\"text-muted ml-2\\\">posted by u/{{post.authorName}}</span>\\n                        </div>\\n                        <h5 class=\\\"card-title\\\">{{post.title}}</h5>\\n\\n                    </div>\\n                    <img src=\\\"{{post.previewImage}}\\\" class=\\\"card-img-top\\\" alt=\\\"...\\\">\\n                </div>\\n            </ng-container>\\n\\n\\n            <div class=\\\"position-relative my-3\\\">\\n                <div *ngIf=\\\"getPageCount() > 0\\\" class=\\\"btn btn-dark \\\" (click)=\\\"this.getPrev()\\\">Previous</div>\\n                <div (click)=\\\"this.getNext()\\\" class=\\\"btn btn-dark position-absolute\\\" style=\\\"top:0px;right: 0px;\\\">Next\\n                </div>\\n            </div>\\n        </div>\\n\\n        <ng-template #loading>\\n            <div class=\\\"text-white position-relative\\\" style=\\\"height: 300px;\\\">\\n                <i class=\\\"fas large-font fa-spinner fa-spin position-absolute\\\" style=\\\"top:50%; left: 50%;\\\"></i>\\n            </div>\\n        </ng-template>\\n    </div>\\n</div>\"","module.exports = \"<ng-container *ngIf=\\\"post else loading\\\">\\n    <div class=\\\"card bg-dark text-white my-3\\\">\\n        <div class=\\\"card-body\\\">\\n            <div class=\\\"d-flex flex-row mb-3 \\\">\\n                <span class=\\\"font-weight-bold mr-2\\\">r/{{post.subReddit}}</span>\\n                <span class=\\\"text-muted ml-2\\\">posted by u/{{post.authorName}}</span>\\n            </div>\\n            <h5 class=\\\"card-title\\\">{{post.title}}</h5>\\n\\n        </div>\\n        <img src=\\\"{{post.previewImage}}\\\" class=\\\"card-img-top\\\" alt=\\\"...\\\">\\n\\n        <div class=\\\"card-body\\\" *ngIf=\\\"post.comments.length > 0\\\">\\n            <div *ngFor=\\\"let comment of post.comments\\\">\\n                <span [innerHTML]=\\\"comment.body\\\"></span>\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n</ng-container>\\n\\n<ng-template #loading>\\n    <div class=\\\"text-white position-relative\\\" style=\\\"height: 300px;\\\">\\n        <i class=\\\"fas large-font fa-spinner fa-spin position-absolute\\\" style=\\\"top:50%; left: 50%;\\\"></i>\\n    </div>\\n</ng-template>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { PostViewComponent } from './post-view/post-view.component'\nimport { ListViewComponent } from './list-view/list-view.component'\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListViewComponent,\n  },\n  {\n    path: ':post',\n    component: PostViewComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component } from '@angular/core';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  constructor(\n  ) { }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { RedditApiService } from './reddit-api.service';\nimport { PostViewComponent } from './post-view/post-view.component';\nimport { ListViewComponent } from './list-view/list-view.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostViewComponent,\n    ListViewComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n\n  ],\n  providers: [\n    RedditApiService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { RedditApiService } from '../reddit-api.service';\nimport { Post } from '../shared-classes';\n\n@Component({\n  selector: 'app-list-view',\n  templateUrl: './list-view.component.html'\n})\nexport class ListViewComponent implements OnInit {\n\n  redditPosts: Post[];\n  selectedPost: string;\n\n  constructor(\n    private RedditAPiService: RedditApiService,\n  ) { }\n\n  async ngOnInit() {\n    this.redditPosts = await this.RedditAPiService.getListings();\n  }\n\n  selectPost(post: string) {\n    this.selectedPost = post;\n  }\n\n  async getPrev() {\n    // Set value to falsy so that loading screen appears\n    this.redditPosts = null;\n    window.scrollTo(0, 0);\n    this.redditPosts = await this.RedditAPiService.getPreviousPage();\n  }\n\n  clearSelectedPost() {\n    this.selectedPost = null;\n  }\n\n  async getNext() {\n    // Set value to falsy so that loading screen appears\n    this.redditPosts = null;\n    window.scrollTo(0, 0);\n    this.redditPosts = await this.RedditAPiService.getNextPage();\n\n  }\n\n  getPageCount() {\n    return this.RedditAPiService.getCount();\n  }\n}\n","import { Component, OnChanges, Input } from '@angular/core';\n\nimport { RedditApiService } from '../reddit-api.service';\nimport { Post } from '../shared-classes';\n\n@Component({\n  selector: 'app-post-view',\n  templateUrl: './post-view.component.html'\n})\nexport class PostViewComponent implements OnChanges {\n  @Input() selectedPost: string;\n  post: Post;\n\n  constructor(\n    private RedditAPiService: RedditApiService,\n  ) { }\n\n  async ngOnChanges() {\n    this.post = await this.RedditAPiService.getPost(this.selectedPost);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, } from '@angular/common/http';\n\nimport { Post, Comment } from './shared-classes';\n\n// CONSTS\nconst LIMIT_KEY = 'limit';\nconst LIMIT = '10';\nconst RAW_JSON_KEY = 'raw_json';\nconst RAW_JSON_VALUE = '1';\n\n@Injectable()\nexport class RedditApiService {\n  private after = '';\n  private before = '';\n  private count = 0;\n\n  constructor(\n    private http: HttpClient,\n  ) { }\n\n  getCount() {\n    return this.count;\n  }\n\n  /**\n   * Returns a Reddit Post(t3) object for a given postId\n   * @param postId https://www.reddit.com/dev/api/#fullnames\n   */\n  async getPost(postId: string): Promise<Post> {\n    const builtURL = `https://www.reddit.com/comments/${postId}/.json`;\n    // Set HTTP Parameters\n    let httpParams = new HttpParams();\n    httpParams = httpParams.set(LIMIT_KEY, LIMIT);\n    httpParams = httpParams.set(RAW_JSON_KEY, RAW_JSON_VALUE);\n    // Get response\n    const response = await this.get(builtURL, httpParams);\n    // Parse response to get a Post object\n    const parsed = this.parseResults(response[0])[0];\n    // Parse comments separately\n    parsed.comments = this.parseComments(response[1]);\n    return parsed;\n  }\n\n  /**\n   * Returns an array of Posts, that starts after the AFTER reference\n   */\n  async getNextPage(): Promise<Post[]> {\n    const response = this.getListings('after', this.after);\n    return response;\n  }\n\n  /**\n   * Returns an array of Posts, that starts at ( BEFORE reference - COUNT)\n   */\n  async getPreviousPage(): Promise<Post[]> {\n    const response = this.getListings('before', this.before);\n    return response;\n  }\n\n  /**\n   * Returns an array of Posts\n   * @param direction Either Before || After, depending on which direction we intend to paginate\n   * @param reference the \"anchor point\" of the data slice https://www.reddit.com/dev/api/#listings\n   */\n  async getListings(direction?: string, reference?: string): Promise<Post[]> {\n    // URL\n    const builtURL = `https://www.reddit.com/r/all/hot.json`;\n    // HTTP Parameters\n    let httpParams = new HttpParams();\n    httpParams = httpParams.set(LIMIT_KEY, LIMIT);\n    httpParams = httpParams.set(RAW_JSON_KEY, RAW_JSON_VALUE);\n\n    // Add direction if provided\n    if (direction) {\n      httpParams = httpParams.set(direction, reference);\n      // update count\n      if (direction === 'after') {\n        this.count = this.count + 10;\n      } else if (direction === 'before') {\n        this.count = this.count - 10;\n      }\n    }\n    httpParams = httpParams.set('count', String(this.count));\n\n    const response: any = await this.get(builtURL, httpParams);\n    // Update anchor points\n    this.after = response.data.after;\n    this.before = response.data.before;\n    // Parse results into Posts\n    return this.parseResults(response);\n  }\n\n  /**\n   * Converts Raw JSON into Post Objects\n   * @param redditResponse : Raw json provided by Reddit\n   */\n  parseResults(redditResponse: any): Post[] {\n    const posts: any[] = redditResponse.data.children;\n    const allPosts: Post[] = [];\n\n    // Parse Posts\n    posts.forEach((post) => {\n      const data = post.data;\n      // Lets not get fired from a job I don't have yet\n      if (data.over_18) {\n        return;\n      }\n      // Create a Post Object\n      const newPost = new Post(\n        data.id,\n        data.permalink,\n        data.subreddit,\n        data.author,\n        this.extractPreviewImages(data),\n        data.title\n      );\n      // Push to list of posts\n      allPosts.push(newPost);\n    });\n    console.groupEnd();\n    return allPosts;\n  }\n\n  /**\n   * Converts Raw JSON into Comment Objects\n   * @param redditResponse :  Raw json provided by Reddit\n   */\n  parseComments(redditResponse: any): Comment[] {\n    const posts: any[] = redditResponse.data.children;\n    const allComments: Comment[] = [];\n\n    // Parse Posts\n    posts.forEach((post) => {\n      const data = post.data;\n      // TODO: We should recurse and collect replies to this comment.\n      const newComment = new Comment(data.id, data.body_html);\n      allComments.push(newComment);\n    });\n\n    return allComments;\n  }\n\n  // Hacky way of safely traversing through unknown object. \n  extractPreviewImages(data) {\n    if (data &&\n      data.preview &&\n      data.preview.images &&\n      data.preview.images[0] &&\n      data.preview.images[0].source &&\n      data.preview.images[0].source.url) {\n      return data.preview.images[0].source.url;\n    } else {\n      return '';\n    }\n  }\n\n\n  /**\n   * Converts a `GET` request into a Promise that the caller can then await for\n   */\n  async get(getUrl: string, httpParameters?: HttpParams): Promise<object> {\n    return new Promise<object>((resolve, reject) => {\n      this.http.get(getUrl, { params: httpParameters }).subscribe((response: object) => {\n        resolve(response);\n      }, reject);\n    }).catch((error) => {\n      throw new Error(`ERROR: Unable to retrieve data from ${getUrl} due to ${error}`);\n    });\n  }\n}\n\n","\nexport class Comment {\n    constructor(\n        public author: string,\n        public body: string,\n        public replies?: Comment[],\n    ) { }\n}\n\nexport class Post {\n    constructor(\n        public id: string,\n        public permalink: string,\n        public subReddit: string,\n        public authorName: string,\n        public previewImage: string,\n        public title: string,\n        public comments?: Comment[]\n    ) { }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}